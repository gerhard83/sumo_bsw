/**
 * @mainpage API Reference Manual
 * This is the reference manual for Sumo Robot Basic Software, a project run at the Chair of 
 * Automatic Control, University Kiel.
 * @tableofcontents
 *
 * @section intro Introduction
 * The Sumo Robot was entirely and completely designed by *Prof. Erich Styger* and his group   
 * at the *Lucerne University of Applied Science and Arts*, Competence Center Electronics - 
 * Department of Eletronics. All the appreciation goes to him since Prof. Styger keeps the hardware
 * design and software open and free. For this reason our team at the *University Kiel*, Chair of 
 * Automatic Control (ACon), was able to install a swarm of Sumo Robots for Multi-Agent applications.
 * @anchor fig1
 * @image html ./sumo.png "Figure 1 The Sumo Robot with a K22F-120 MHz MCU, based on Arm® Cortex®-M4 Core." width=100
 * The robot is illustrated in @ref fig1 "Figure 1" and features among others the main following 
 * properties
 *
 *  | Type          | Feature                                              |
 *  | ------------- | ---------------------------------------------------- |
 *  | Processor	    | ARM Cortex-M4F @ \f$ 120 \f$MHz with FPU             |
 *	| RAM			| \f$ 2\times64\f$kB                                   |
 * 	| Flash		    | \f$ 512 \f$kB                                        |
 *	| Communication | USB, nRF24, Bluetooth                                |
 * 	| Motors        | \f$ 2 \f$ DC motors with \f$ 75:1 \f$ reduction gear |
 * 	| Periphery     | \f$ 6  \f$ axis IMU, \f$ 2 \f$ LEDs, Buzzer,  @n Magentic quadrature encoders @n IR line sensors, Arduino header, etc. |
 *
 * We at ACon completely took over the hardware from Prof. Styger's design and use most of 
 * the software designed and implemented by Prof. Styger's team in Lucerne. However we modified 
 * the software for our needs and requirements. In particular we adapted the software to fit into a 
 * framework which allows to quickly implement applications for the Sumo Robot. The architecture is 
 * especially designed for people who are not too much into embedded systems but are aware of the 
 * basics of the C programming language.
 *
 *
 * @section architecture Software Architecture
  * @subsection overview Overview
 * The following @ref fig2 "Figure 2" gives an overview of the designed framework. It mainly 
 * consists of three parts which are discussed in the following briefly.
 * @anchor fig2
 * @image html architecture.png "Figure 2 Overview of the entire software architecture."
 *
 *
 * - **Basic Software** @n
 * The Basic Software (BSW) runs and treats the low-level componets such as the firmware, drivers 
 * and hardware abstractions from the MCU-OEM NXP. Moreover it implements auto-code generated 
 * software components from the NXP code generator *Processor Expert* (PEx). In this context it uses
 * both, components designed from the OEM and Prof. Styger's team. The BSW runs [FreeRTOS](http://www.freertos.org) 
 * which registers four aditional tasks (apart from the @c IDLE task) which are vividly illustrated 
 * in @ref fig2 "Figure 2". For further abstraction purposes the BSW provides the so-called runtime 
 * environment. Each BSW component is connected to this layer. The runtime environemnt is 
 * described separately below.
 *
 *
 * - **Runtime environment** @n
 * The runtime environment (@ref rte) is implemented as part of the BSW, but architecture point of
 * view it is acutally an intermediate software layer which abrstracts the entire Sumo Robot and 
 * provides an unique interface for application programming. It connects Basic Software with 
 * Application Software.  
 *
 *
 * - **Application software** @n
 * Acutal applications can be designed, programmed and compiled to a static libariy (.a-file) 
 * independently from the BSW of the Sumo Robot. The application software (ASW) only requires the 
 * RTE interface and some RTE-consistent type definitions. The archive of the ASW needs to be linked
 * to the BSW, compiled with the flag @c -D @c ASW_ENABLED. Moreover the ASW needs to implement a 
 * modulue called @c asw.c/h and the functions
 *	- @c **void** @c ASW_Init(@c **void**) and
 *	- @c **void** @c ASW_Main(@c **void**) .
 *
 *
 * @subsection swc Software Component Design
 * Each software component is intended to be designed in a way that it fits into a general structure 
 * which consists of three main modules. They modules are described in the following breifly.
 * - **Configuration** of the software component.
 * 		- @c swc_cfg.c: Implementation of the @a SWC configuration.
 * 		- @c swc_cfg.h: Config data type definitions and interface for the reference to the @a SWC configuration (table).
 * - **Core implementation** of the functionality.
 * 		- @c swc.c: Actual definitions and implementation of the algorithms.
 * 		- @c swc.h: Header file with declarations for initialisation and runtime calls.
 * 		- @c swc_api.h: Interface of @a SWC to other @a SWCs, e.g. to the runtime environment (@ref rte).
 * - **Command line shell handler**.
 * 		- @c swc_clshdlr.c: Implementiation *SWC*-specific debug routines.
 * 		- @c swc_clshdlr.h: Interface to the @ref sh configuration. The @ref sh component runs the low-level component *comand line shell* (*CLS*).
 *
 * @n @n @n
 * **Credits**: Many thanks to Prof. Styger who supported our project with his expertise. Interested in Embedded Systems? - Visit his blog http://www.mcuoneclipse.com.
 */